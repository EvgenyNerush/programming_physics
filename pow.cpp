#include <iostream>

// функция pow(n, m) возвращает n^m. Для вычисления n^m при m = 0,
// для типа T должна быть определена "единица" T(1). Например,
// double(1) = 1.0. Очевидно также, что для типа T должен быть
// определён оператор умножения (*).
template <typename T> T pow(T n, unsigned int m) {
    // стоит заметить, что n и m здесь - копии передаваемых аргументов
    T p = T(1); // собираем в эту переменную множители
    while (m != 0) {
        if (m % 2 == 1) {
            m = m - 1;
            p = p * n;
        } else {
            n = n * n;
            m = m / 2;
            // с p ничего не делаем
        }
    }
    return p;
}

int main() {
    std::cout << pow<int>(2, 15) << '\n'; // 32768
    std::cout << pow<float>(-0.2, 3) << '\n'; // -0.008
    std::cout << pow<unsigned int>(-2.7, 3) << '\n'; // Oups! Неявная конверсия типа,
                                                     // (unsigned int) (-2.7)
                                                     // не есть +2.7
    std::cout << pow<unsigned int>( 2.7, 3) << '\n'; // А здесь получим 8
    return 0;
}
